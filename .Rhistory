??grid.arrange
library(gridExtra)
grid.arrange(p1, p2, ncol=2)
t1 <- table(cutWage, training$jobclass)
t1
prop.table(t1, 1)
qplot(wage, color=education, data=training, geom="density")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex
head(training)
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(concrete)
modFit <- train(CompressiveStrength ~., model="lm", data = training)
modFit <- train(CompressiveStrength ~., method="lm", data = training)
modFit
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
finMod <- modFit$FinalModel
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
finMod
modFit
modFit$finalModel
finMod <- modFit$finalModel
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
names(training)
str(training)
?cut2
cut2(training$Cement, 3)
str(training)
names(concrete)
qplot(finMod$fitted,finMod$residuals,colour=Age,data=training)
qplot(finMod$fitted,finMod$residuals,colour=FlyAsh,data=training)
qplot(finMod$fitted,finMod$residuals,colour=Age,data=training)
concrete$Age
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
plot(finMod$residuals,pch=19)
plot(finMod$residuals,pch=19, color=Age)
plot(finMod$residuals,pch=19, color=Age, data=training)
qplot(finMod$residuals,pch=19, color=Age, data=training)
plot(finMod$residuals,pch=19)
plot(finMod$residuals,pch=19, fill=Age)
plot(finMod$residuals,pch=19, fill=training$Age)
?plot
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, 3),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, 2),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, 4),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, 5),data=training)
?cut2
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=3),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=5),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=4),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=3),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=2),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(FlyAsh, g=2),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(FlyAsh, g=3),data=training)
plot(mixtures$CompressiveStrength[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=Age)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$Age)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$FlyAsh)
names(mixtures)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$FlyAsh[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$Age[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=3))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=2))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=4))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age, g=4))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age, g=3))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
names(mixtures)
hist(mixtures$Superplasticizer)
?hist
hist(mixtures$Superplasticizer, breaks=10)
hist(mixtures$Superplasticizer, breaks=100)
hist(mixtures$Superplasticizer, breaks=50)
mixtures$Superplasticizer
hist(log(mixtures$Superplasticizer, breaks=50))
hist(log(mixtures$Superplasticizer), breaks=50)
hist(log10(mixtures$Superplasticizer), breaks=50)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grepl("IL", names(training))
grepl("^IL", names(training))
ILtraining <- training[grepl("^IL", names(training)),]
names(training)
ILtraining <- training[1+grepl("^IL", names(training)),]
names(ILtraining)
ILtraining <- training[,1+grepl("^IL", names(training))]
names(ILtraining)
ILtraining <- training[,grepl("^IL", names(training))]
names(ILtraining)
training[,1]
head(training)
preProc <- preProcess(ILtraining,method="pca")
spamPC <- predict(preProc,ILtraining)
plot(spamPC[,1],spamPC[,2],col=typeColor)
?preProcess
preProc
preProc <- preProcess(ILtraining,method="pca", thresh=.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtraining <- training[,grepl("^IL", names(training))&&"diagnosis"]
names(ILtraining)
ILtraining <- training[,grepl("^IL", names(training))&"diagnosis"]
ILtraining <- training[,grepl("^IL"|"diagnosis", names(training))]
ILtraining <- training[,grepl("^IL")|grepl("diagnosis"), names(training))]
ILtraining <- training[,grepl("^IL")|grepl("diagnosis")]
ILtraining <- training[,grepl("^IL", names(training))|grepl("diagnosis", names(training))]
names(ILtraining)
names(ILtraining[,-1])
preProc <- preProcess(ILtraining[,-1],method="pca", thresh=.8)
trainPC <- predict(preProc, ILtraining[,-1])
modelFit <- train(ILtraining$diagnosis ~ .,method="glm",data=trainPC)
modelFit
testingIL <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
ILtesting <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
confusionMatrix(ILtesting$diagnosis,predict(modelFit,testPC)) # get accuracy
modelFit <- train(diagnosis ~., data=training, method = "glm")
test <- predict(modelFit, testing[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, test))
test <- predict(modelFit, testing)
confusionMatrix(testing$diagnosis, predict(modelFit, test))
test
modelFit
test <- predict(modelFit, testing[,-1])
prediction <- predict(modelFit, newdata=testing)
confusionMatrix(prediction, testing$diagnosis)
confusionMatrix(ILtesting$diagnosis,predict(modelFit,testPC)) # get accuracy
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtraining <- training[,grepl("^IL", names(training))|grepl("diagnosis", names(training))]
preProc <- preProcess(ILtraining[,-1],method="pca", thresh=.8)
trainPC <- predict(preProc, ILtraining[,-1])
modelFitPC <- train(ILtraining$diagnosis ~ .,method="glm",data=trainPC)
ILtesting <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
confusionMatrix(ILtesting$diagnosis,predict(modelFitPC,testPC)) # get accuracy
modelFit <- train(diagnosis ~., data=ILtraining, method = "glm")
prediction <- predict(modelFit, newdata=ILtesting)
confusionMatrix(prediction, ILtesting$diagnosis)
First Slide
install_github("randyzwitch/RSiteCatalyst", ref="master")
devtools::install_github("randyzwitch/RSiteCatalyst", ref="master")
library(RSiteCatalyst)
?QueueOvertime
?GetClassifications
library(datasets)
names(ability)
names(ability.cov)
head(ability.cov)
pairs(ability.cov)
?pairs
library(ggplot2)
?pairs
pairs(log10(ability.cov))
head(discoveries)
library(XML)
library(RCurl)
########
#Function: get_table_team(team_id, yearlist)
########
#team_id: team name as three letter string (e.g., "CHI")
#yearlist: which years to fetch data from
#returns dataframe with all the tables
#EXAMPLE: chi <- get_table_team("chi", 2007:2013)
get_table_team <- function(team_id, yearlist) {
results <- c()
for(year in yearlist) {
fileurl <- paste("http://www.basketball-reference.com/teams/",toupper(team_id),"/",year,"_games.html", sep = "")
doc <- htmlTreeParse(fileurl, useInternal = TRUE) #parse html
html_tables <- readHTMLTable(doc) #read html tables: contains Regular Season Table and Playoffs Table
regseason <- html_tables[[1]][,c("Date", "Opponent", "Tm", "Opp", "W", "L")] #Get all info from Regular Season table
regseason <- regseason[regseason$Date != "Date",] #Remove extra repeated rows containing headers
Season <- rep(as.numeric(year), nrow(regseason)) #add column for year
regseason <- cbind(regseason, Season)
results <- rbind(results, regseason)
}
return(results)
}
chi <- get_table_team("chi", 2000:2005)
head(chi)
chi <- get_table_team("bkn", 2000:2005)
chi <- get_table_team("bkn" | "njn", 2000:2005)
chi <- get_table_team("brk", 2000:2005)
head(chi)
class(chi$Date)
chi$Date <- as.Date(chi$Date)
library(lubridate)
?lubridate
chi$Date[1]
mdy(chi$Date[1])
dmy(chi$Date[1])
ymd(chi$Date[1])
mdy(chi$Date[1])
class(mdy(chi$Date[1]))
timeDate(mdy(chi$Date[1]))
?timeDate
nets <- get_table_team("brk", 2000:2013)
nets$Date <- mdy(nets$Date)
str(nets)
nets[,c(3:6)] <- as.numeric(nets[,c(3:6)])
for (i in 3:6) {
nets[,i] <- as.numeric(nets[,i])
}
str(nets)
nets$Season <- as.factor(nets$Season)
library(rCharts)
install.packages("rCharts")
devtools::install_github('rCharts', 'ramnathv')
library(rCharts)
names(nets)
p7 <- nPlot(Tm + Opp ~ Date, group = "Season", data=nets,
type ="lineWithFocusChart")
plot(p7)
p7
nets$Date <- as.numeric(as.Date(nets$Date))
p7 <- nPlot(Tm + Opp ~ Date, group = "Season", data=nets,
type ="lineWithFocusChart")
p7$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %d %Y')(new Date( d * 86400000 ));}!#" )
p7
p7 <- nPlot(Tm ~ Date, group = "Season", data=nets,
type ="lineWithFocusChart")
p7$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %d %Y')(new Date( d * 86400000 ));}!#" )
p7
head(nets)
nets <- get_table_team("brk", 2000:2013)
head(nets)
for (i in 3:6) {nets[,i] <- as.numeric(nets[,i])}
head(nets)
nets <- get_table_team("brk", 2000:2013)
nets$Tm[1]
class(nets$Tm[1])
as.numeric(nets$Tm[1])
as.factor(nets$Tm[1])
as.integer(nets$Tm[1])
as.factor(nets$Tm[1])
as.numeric(nets$Tm[1], digits=3)
as.factor(nets$Tm[1])
as.character(nets$Tm[1])
as.numeric(nets$Tm[1])
as.factor(nets$Tm[1])
as.numeric(levels(nets$Tm[1]))
nets$Tm[1]
class(nets$Tm[1])
nets$Tm <- as.numeric(levels(nets$Tm))
nets$Tm[1]
class(nets$Tm[1])
as.numeric(paste(nets$Tm[1]))
class(as.numeric(paste(nets$Tm[1])))
for (i in 3:6) {nets[,i] <- as.numeric(paste(nets[,i]))}
class(nets$Tm[1])
class(nets$Tm[2])
head(nets)
nets$Season <- as.factor(nets$Season)
nets$Date <- mdy(nets$Date)
month()
month(nets$Date[1])
class(month(nets$Date[1]))
as.Date(month(nets$Date[1]))
month(nets$Date[1])
nets$Date <- as.numeric(as.Date(nets$Date))
p7 <- nPlot(Tm ~ Date, group = "Season", data=nets,
type ="lineWithFocusChart")
p7$xAxis( tickFormat="#!function(d) {return d3.time.format('%b %d')(new Date( d * 86400000 ));}!#" )
p7
nets$Date <- as.character(as.Date(nets$Date))
nets$Date <- mdy(nets$Date)
nets <- get_table_team("brk", 2000:2013)
nets$Date <- mdy(nets$Date)
for (i in 3:6) {nets[,i] <- as.numeric(paste(nets[,i]))}
nets$Season <- as.factor(nets$Season)
nets <- get_table_team("brk", 2000:2013)
nets$Date <- mdy(nets$Date)
for (i in 3:6) {nets[,i] <- as.numeric(paste(nets[,i]))}
nets$Season <- as.factor(nets$Season)
head(nets)
nets <- get_table_team("brk", 2000:2013)
head(nets)
nets$Date <- mdy(nets$Date)
for (i in 3:6) {nets[,i] <- as.numeric(paste(nets[,i]))}
nets$Season <- as.factor(nets$Season)
nets$DateC <- as.character(nets$Date)
m1 <- mPlot(x = "DateC", y = c("Tm", "Opp"), type = "Line", data= nets)
m1$set(pointSize = 0, lineWidth = 1)
m1
m1 <- mPlot(x = "DateC", y = c("Tm", "Opp"), type = "Line", data= nets[,Season=="2002"])
m1$set(pointSize = 0, lineWidth = 1)
m1
?subset
subset(nets, Season == "2002")
m1 <- mPlot(x = "DateC", y = c("Tm", "Opp"), type = "Line", data= subset(nets, Season == "2002")
m1$set(pointSize = 0, lineWidth = 1)
m1 <- mPlot(x = "DateC", y = c("Tm", "Opp"), type = "Line", data= subset(nets, Season == "2002"))
m1$set(pointSize = 0, lineWidth = 1)
m1
examples(MorrisJS)
examples(Morris)
morris
morris.R
Morris
Morris()
?rCharts
??rCharts
??rCharts
rCharts::morris
rCharts::Morris
demo(morris)
m1$set(type = "Area")
m1
demo(nvd3)
?mPlot
?mPlot$set
m1$set(pointSize = 0, lineWidth = 1, lineColors=c("red", "blue"))
m1
m1 <- mPlot(x = "DateC", y = c("Tm", "Opp"), type = "Line", data= subset(nets, Season == "2002"))
m1$set(pointSize = 0, lineWidth = 1, lineColors=c("red", "blue"))
m1
names(nets)
names(nets)[3]
names(nets)[3] <- "Nets"
names(nets)
unique(Nets$Season)
unique(nets$Season)
levels(nets$Season)
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
shiny::runApp('~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny')
save(nets, "./data/nets.Rda")
save(nets, "./data/nets.Rda")
setwd("~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny")
save(nets, "./data/nets.Rda")
save(nets, file="./data/nets.Rda")
shiny::runApp()
load("~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny/data/nets.Rda")
head(nets)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- subset(nets, Season == Season)
load("./data/nets.Rda")
library(rCharts)
data <- subset(nets, Season == Season)
m1 <- mPlot(x = "Date", y = c("Nets", "Opp"), type = "Line", data=data)
m1$set(pointSize = 0, lineWidth = 1, lineColors=c("red", "blue"))
m1
data <- subset(nets, Season == "2002")
m1 <- mPlot(x = "Date", y = c("Nets", "Opp"), type = "Line", data=data)
m1$set(pointSize = 0, lineWidth = 1, lineColors=c("red", "blue"))
m1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(Nets)
names(nets)
shiny::runApp()
load("./data/nets.Rda")
load("./data/nets.Rda")
View(nets)
m1 <- mPlot(x = "Date", y = c("Nets", "Opp"), type = "Line", data=subset(nets, Season == "2000"))
m1$set(pointSize = 0, lineWidth = 1, lineColors=c("red", "blue"))
return(m1)
m1
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mean(nets$Nets)
round(mean(nets$Nets),2)
paste("sup",round(mean(nets$Nets),2)
)
shiny::runApp()
paste("sup",round(mean(nets$Nets),2), "that")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shinyapps)
deployApp()
load("./data/nets.Rda")
data <- load("./data/nets.Rda")
data
source("./data/nets.Rda")
getwd()
deployApp()
nets <- read.table("nets.Rda")
nets <- read.file("nets.Rda")
nets <- read("nets.Rda")
nets <- read.Rda("nets.Rda")
nets <- read.rda("nets.Rda")
nets <- load("nets.Rda")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("./data/nets.Rda")
shiny::runApp()
shiny::runApp()
getwd()
load("~/datasciencecoursera/My Files/09-Products/Project/Nets-Shiny/nets.Rda")
View(nets)
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("./data/nets.Rda")
write.csv(nets, "./data/nets.csv")
load("./data/nets.csv")
source("./data/nets.csv")
shiny::runApp()
shiny::runApp()
?readRDA
?readRDS
save(nets, "./data/nets.RDS")
load("./data/nets.Rda")
save(nets, "./data/nets.RDS")
load("./data/nets.Rda")
nets <- read.csv("./data/nets.csv")
